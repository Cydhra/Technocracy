import org.ajoberstar.grgit.Grgit

buildscript {
    project.ext {
        jvm_target = '1.8'
        kotlin_version = '1.3.70'

        minecraft_version = '1.12.2'
        forge_version = '14.23.5.2815'
        forge_plugin_version = '2.3.2-SNAPSHOT'
        mappings_version = 'snapshot_20180609'
        grgit_version = '3.1.1'
        dokka_version = '0.10.1'

        forgelin_version = '1.8.4'
        jei_version = '4.15.0.293'
        zerocore_version = '1.12-0.1.1.0'
        ctm_version = 'MC1.12.2-0.3.3.22'
        waila_version = '1.8.26-B41_1.12.2'
        top_version = '1.12-1.4.28-17'
        cofhcore_version = '1.12.2-4.6.3.27'
        buildcraft_version = '7.99.8.2'

        mod_version = '0.1-alpha6'

        root_build_dir = project.buildDir
    }

    ext.mod_id = 'technocracy.monolith'

    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: kotlin_version
        classpath group: 'com.github.Minecraft-Technocracy', name: 'ForgeGradle', version: forge_plugin_version
        classpath group: 'org.ajoberstar.grgit', name: 'grgit-gradle', version: grgit_version
        classpath group: 'org.jetbrains.dokka', name: 'dokka-gradle-plugin', version: dokka_version
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.dokka'

allprojects {
    apply plugin: 'net.minecraftforge.gradle.forge'
    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.dokka'

    version = project.mod_version
    group = "net.cydhra.technocracy"

    libsDirName = "$root_build_dir/artifacts"

    sourceSets {
        // the api source set creates more problems on compile than it solves, so we just throw it away
        remove api
    }

    repositories {
        jcenter()
        maven {
            name 'Forgelin Maven Repository'
            url 'https://maven.shadowfacts.net/'
        }
        maven {
            name "JEI Maven Repository"
            url "https://dvs1.progwml6.com/files/maven/"
        }
        maven {
            name "zerocore Repository"
            url "http://maven.zerono.it/"
        }
        maven {
            name "chisel Repository"
            url "https://maven.tterrag.com"
        }
        maven {
            name "waila Repository"
            url "http://maven.tehnut.info"
        }
        maven { // CoFH
            name 'CoFH maven'
            url "https://maven.covers1624.net/"
        }
        maven {
            name 'buildcraft Repository'
            url "https://mod-buildcraft.com/maven/"
        }
        maven {
            name 'jitpack'
            url 'https://jitpack.io'
        }
    }

    minecraft {
        version = "$project.minecraft_version-$project.forge_version"
        runDir = "run"
        mappings = project.mappings_version
        makeObfSourceJar = false
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'

            // replace version and mcversion
            expand 'version': project.version, 'mcversion': project.minecraft.version, 'modid': project.mod_id
        }

        // copy everything else except the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }

        rename '(.+_at.cfg)', 'META-INF/$1'
    }

    compileKotlin {
        kotlinOptions.jvmTarget = project.jvm_target
    }

    idea {
        module {
            inheritOutputDirs = false
            outputDir = file("out")
        }
    }

    dokka {
        outputFormat = 'markdown'
        outputDirectory = "$buildDir/dokka"
    }
}

project('technocracy.foundation') {
    dependencies {
        deobfCompile group: 'net.shadowfacts', name: 'Forgelin', version: project.forgelin_version
        deobfCompile group: 'mezz.jei', name: "jei_$project.minecraft_version", version: project.jei_version, classifier: 'api'
        deobfCompile group: "it.zerono.mods.zerocore", name: "zerocore", version: project.zerocore_version
        deobfCompile group: "team.chisel.ctm", name: "CTM", version: project.ctm_version
        deobfCompile group: "mcp.mobius.waila", name: "Hwyla", version: project.waila_version, classifier: 'api'
        deobfCompile group: "com.mod-buildcraft", name: "buildcraft-api", version: project.buildcraft_version

        deobfCompile("cofh:CoFHCore:${cofhcore_version}:universal") {
            transitive = false // We don't need RF nor JEI, thank you very much
        }
        deobfCompile group: 'cofh', name: 'RedstoneFlux', version: '1.12-+', classifier: 'universal'

        deobfCompile group: "mcjty.theoneprobe", name: "TheOneProbe-1.12", version: project.top_version,
                classifier: 'api'

        if (project.hasProperty('technoblock')) {
            def override = project.getProperty('technoblock')
            println "!> override technoblock with \"$override\""
            implementation files(override)
        } else {
            implementation group: 'com.github.Minecraft-Technocracy', name: 'technoblock', version: '533e16d272'
        }
    }

    jar {
        manifest {
            attributes 'FMLAT': 'technocracy_at.cfg'
        }
    }
}

project('technocracy.astronautics') {
    dependencies {
        compile project(':technocracy.foundation')
        compile project(':technocracy.core')
    }

    // jar configuration
    jar {
        manifest {
            attributes 'FMLAT': 'astronautics_at.cfg'
        }
    }
}

project('technocracy.core') {
    dependencies {

    }

    jar {
        manifest {
            attributes 'FMLCorePluginContainsFMLMod': 'true',
                    'FMLCorePlugin': 'net.cydhra.technocracy.coremod.TCCorePlugin'
        }
    }
}

project('technocracy.optics') {
    dependencies {
        compile project(':technocracy.foundation')
    }
}

project('technocracy.powertools') {
    dependencies {
        compile project(':technocracy.foundation')
        compile project(':technocracy.core')
    }
}

/*
 * MONOLITH CONFIGURATION
 */
configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade(project('technocracy.foundation')) { transitive = false }
    shade(project('technocracy.astronautics')) { transitive = false }
    shade(project('technocracy.optics')) { transitive = false }
    shade(project('technocracy.powertools')) { transitive = false }
    shade(project('technocracy.core')) { transitive = false }

    runtime(project('technocracy.foundation'))
    runtime(project('technocracy.astronautics'))
    runtime(project('technocracy.optics'))
    runtime(project('technocracy.powertools'))
    runtime(project('technocracy.core'))

    deobfCompile group: 'net.shadowfacts', name: 'Forgelin', version: project.forgelin_version
    deobfCompile group: 'mezz.jei', name: "jei_$project.minecraft_version", version: project.jei_version, classifier: 'api'
    deobfCompile group: "it.zerono.mods.zerocore", name: "zerocore", version: project.zerocore_version
    deobfCompile group: "team.chisel.ctm", name: "CTM", version: project.ctm_version
    deobfCompile group: "mcp.mobius.waila", name: "Hwyla", version: project.waila_version, classifier: 'api'
    deobfCompile group: "com.mod-buildcraft", name: "buildcraft-api", version: project.buildcraft_version

    deobfCompile("cofh:CoFHCore:${cofhcore_version}:universal") {
        transitive = false // We don't need RF nor JEI, thank you very much
    }
    deobfCompile group: 'cofh', name: 'RedstoneFlux', version: '1.12-+', classifier: 'universal'

    deobfCompile group: "mcjty.theoneprobe", name: "TheOneProbe-1.12", version: project.top_version,
            classifier: 'api'
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**', 'mcmod.info', 'pack.mcmeta'
        }
    }

    manifest {
        attributes 'FMLAT': 'monolith_at.cfg'
    }
}

/*
 * A setup task to setup all modules at once
 */
task setup() {
    setGroup("setup")
    dependsOn(
            ':technocracy.foundation:setupDecompWorkspace',
            ':technocracy.astronautics:setupDecompWorkspace',
            ':technocracy.optics:setupDecompWorkspace',
            ':technocracy.powertools:setupDecompWorkspace'
    )
}

task cloneTechnoblock() {
    setGroup("environment")
    def destination = "$projectDir/libs/technoblock"

    doLast {
        if (!file(destination).exists()) {
            Grgit.clone(dir: destination, uri: "https://github.com/Minecraft-Technocracy/Technoblock")
        }
    }
}

///**
// * This adds any `subproject`'s Access Transformers to the `rootProject` so functionality works in debug mode.
// * Credit to FusionLord https://gist.github.com/FusionLord/a8f0208b6ffaa2f466f119a13c4a1620
// */
import net.minecraftforge.gradle.user.patcherUser.forge.ForgeExtension
import net.minecraftforge.gradle.user.patcherUser.forge.ForgePlugin

task applySubATs {
    ForgeExtension e = getPlugins().getPlugin(ForgePlugin.class).getExtension()
    subprojects.each { p ->
        p.sourceSets.main.resources.findAll{ f -> f.path.endsWith('_at.cfg')}.each { f ->
            e.atSource(f)
        }
    }
}

afterEvaluate {
    tasks.extractDependencyATs.finalizedBy applySubATs
}