buildscript {
    apply from: '../buildscript.gradle'

    ext.mod_id = 'technocracy.foundation'

    repositories {
        mavenCentral()
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: project.forge_plugin_version
        classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: project.kotlin_version
    }
}

apply from: '../configuration.gradle'

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version, 'modid':mod_id
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

dependencies {
    compile group: 'net.shadowfacts', name: 'Forgelin', version: forgelin_version
    compile group: 'org.jgrapht', name: 'jgrapht-core', version: jgrapht_version

    deobfCompile group: 'mezz.jei', name: "jei_$minecraft_version", version: jei_version

    deobfCompile group: 'cofh', name: 'CoFHCore', version: "$minecraft_version-$cofhcore_version",
            classifier: 'universal'
    deobfCompile group: 'cofh', name: 'CoFHWorld', version: "$minecraft_version-$cofhworld_version",
            classifier: 'universal'
    deobfCompile group: 'cofh', name: 'RedstoneFlux', version: "1.12-$redstoneflux_version",
            classifier: 'universal'
    deobfCompile group: "it.zerono.mods.zerocore", name: "zerocore", version: "1.12-0.1.1.0"
}

// jar configuration
jar {
    manifest {
        attributes 'FMLAT': 'technocracy_at.cfg'
    }
}

//
// the following tasks are a workaround for IntelliJ's habbit of keeping built classes and resources apart, which
// breaks an assumption of forge's resource loader thus assets cannot be found while running the mod inside IntelliJ.
//
//task delOriginalAssets(type: Delete) {
//    delete "$project.buildDir/resources"
//}
//
//task copyAssets(type: Copy) {
//    from("$project.buildDir/resources")
//    into("$project.buildDir/classes/kotlin")
//
//    finalizedBy delOriginalAssets
//}
//
//build.finalizedBy(copyAssets)