package net.cydhra.technocracy.foundation.conduits.query

import net.cydhra.technocracy.foundation.conduits.transit.TransitSink

/**
 * An interface for a strategy for routing through a network. The implementor is ought to be stateless, or, if a an
 * implementor might use multiple instances using different state for configuration, it should not store state about
 * the network and the routes it handles. All route-specific state shall be stored in the [NetworkQuery] instances
 * generated by the strategy.
 */
interface RoutingStrategy<T : NetworkQuery> {

    /**
     * Prepares a [NetworkQuery] instance that can then be used to cache routing information generated by
     *
     * @param providerSink the provider of output that shall be routed through the conduit network
     *
     * @return a [NetworkQuery] that stores state about the route. It is used by [provideTargetSink] to determine
     * routing targets
     *
     * @see [provideTargetSink]
     */
    fun prepareQuery(providerSink: TransitSink): T

    /**
     * Search the network for a available sink that accepts the given asset, updating [query] in the process. If
     * [query] already contains all necessary data in order to provide a target, an update of data is not mandatory
     * but may be done at will.
     *
     * @param query network query cached state
     * @param transferAsset network asset to transfer
     *
     * @return true, if a transfer is possible
     */
    fun canTransfer(query: T, transferAsset: TransferAsset): Boolean

    /**
     * Attempt to transfer as much of the given asset as possible to a target chosen from [query] state at the
     * implementors' choice. The network must not be queried for more possible targets, as this shall be done in
     * [canTransfer]. If no sink accepts [transferAsset], an [IllegalStateException] is thrown, as it is asserted
     * that [canTransfer] found a valid target.
     *
     * @param query network query cached state
     * @param transferAsset asset to transfer
     */
    fun transferAsset(query: T, transferAsset: TransferAsset)
}